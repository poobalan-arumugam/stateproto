from reader.parseStateProtoFile import *
from codegenbase import *
import string

class PythonVisitor (CodeGenVisitor):
    def __init__(self, parsedModel):
        CodeGenVisitor.__init__(self, parsedModel)

    def getAction(self, action):
        if action == None:
            action = "pass"
        else:
            actions = action.split(";")
            action = ["self." + action  for action in actions]
            action = string.join(action, """
            """)
        return action

    def fixParentStateName(self, parentStateName):
        if not self.isTopState(parentStateName):
            return "s_" + parentStateName
        return parentStateName    

    def stateMethodTemplate(self, dict):        
        startStatePattern = ""
        if dict['childStartStateName'] != None:
            startStatePattern = """
        elif ev.QSignal == QSignals.Init:
            self.initialiseState(self.s_%(childStartStateName)s)""" % dict
            pass
        dict['startStatePattern'] = startStatePattern
        return """
    def s_%(stateName)s(self, ev):
        %(transitions)sif ev.QSignal == QSignals.Entry:
            %(entryAction)s
        elif ev.QSignal == QSignals.Exit:
            %(exitAction)s%(startStatePattern)s
        else:
            return self.%(parentStateName)s
        return None
    """ % dict
    pass
    
    def transitionsForOuterStateMethodTemplate(self, dict):
        return """if ev.QSignal == "%(transitionEvent)s":
            %(innerGuardText)s
        el""" % dict
    pass

    def transitionsToStringWithGuardsTemplate(self, transitionGroup):
        def guardedTransToText(transition, isFirstTransition):
            guard = transition.guard
            transitionAction = self.getAction(transition.action)
            toStateName = self._parsedModel.ByGuid(transition.tostate).name
            if guard:
                elExpr = ""
                if not isFirstTransition:
                    elExpr = " else "
                return elExpr + """if self.%(guard)s:
                %(transitionAction)s
                self.transitionTo(self.s_%(toStateName)s)
            """ % locals()
            else:
                if isFirstTransition:
                    return """%(transitionAction)s
            self.transitionTo(self.s_%(toStateName)s)""" % locals()
                else:
                    return """else:
                %(transitionAction)s
                self.transitionTo(self.s_%(toStateName)s)""" % locals()
                

        def reducePerCondition(prevValue, transition, arg):
            return prevValue + guardedTransToText(transition, prevValue == "")
            
        result = transitionGroup.reduce("", reducePerCondition, None)
        return result        
    pass
                    
class PythonLanguageGenerator(object):
    def generatorVersion(self):
        return "0.1"
    def setModel(self, model):
        self._Model = model
        self._StateMethodGenerator = PythonVisitor(model)
        pass
    def writeClassHeader(self, header):
        statemachine = header.statemachine
        defaultStartState = self._Model.defaultStartState.name
        generatorVersion = self.generatorVersion()
        print """import qhsm
from qhsm import QSignals, QEvent

# generated by PythonGenerator version %(generatorVersion)s

class %(statemachine)s(qhsm.QHsm):

    def initialiseStateMachine(self):
        self.initialiseState(self.s_%(defaultStartState)s)
""" % locals()
        pass
    def writeClassTrailer(self, header):
        statemachine = header.statemachine
        print """
    #end of %(statemachine)s
    pass""" % locals()
        pass
    def writeStartClassBody(self):
        pass
    def writeStateMethod(self, state):
        self._StateMethodGenerator.visitState(state, None)
        pass
    def writeEndClassBody(self):
        pass
    pass

